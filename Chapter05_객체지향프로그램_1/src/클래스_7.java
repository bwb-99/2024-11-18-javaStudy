/*
 * 		프로그램 : 설계
 * 		설계
 * 		 = 변수 : 데이터
 * 		 = 메소드 : 기능
 * 		 ------------
 * 		 class =====> 메모리에 저장 =====> 활동 ===> 객체소멸
 * 					  객체 / 인스턴스
 * 	  	 설계
 * 	 	 class 클래스명
 * 		{
 * 			사용할 데이터 설정 : 웹 => 상세보기 => 변수
 * 			데이터 활용도 : 메소드 
 * 			변수 => 데이터 수집 => 생성자 , 초기화 블럭
 * 		}
 * 		
 * 		메모리에 저장 => Call By Reference 가능
 * 		클래스명 객체명=new 클래스명()
 * 		------ ---- --- 클래스 크기에 맞게 메모리 생성
 * 						=> 객체명에 생성된 주소를 넘겨준다
 * 						new => 리턴형 => 메모리 주소(정수형)
 * 					 new => 메소드
 * 							int malloc(클래스)
 * 							-----------메모리 저장 => 주소리턴
 * 							=> 승격 => new
 * 							=> 메모리 해제 => free() => delete
 * 														|사용하지 않는다
 * 														|GC(가비지 컬렉션)
 * 				변수=> 여러개 변수를 제어
 * 		데이터형(사용자 정의)
 * 
 * 		객체 활용
 * 		객체명.변수, 객체명.메소드......
 * 		
 * 		객체소멸
 * 		객체명=null
 * 
 * 		=> 생명주기
 * 		설계 ====> 저장 ==> 활용 ==> 소멸
 * 		----------------------------
 * 		소멸 => GC바로 회수하지 않는다 => 프로그램 종료시에 회수
 * 		=> 윈도우 / 웹 => 최적화
 * 		--------------------------------------------
 * 		눈이 보이거나 / 가상 => 객체화
 * 		현실세계 / 비현실 세계 객체화 =====> 시뮬레이션
 * 		--------------------------------------
 * 		| 개발자만 알면 된다
 * 		| 개발자마다 변수 설정 / 메소드 설정
 * 		| => 중요한 데이터는 감춰져 있다
 * 			 --------------------
 * 	   자바(프로그램 언어) => 데이터 관리
 * 			1) 메모리 저장
 * 			  ---------
 * 				언제까지 사용이 가능
 * 			3) 관리 시작 => 메소드 이용
 * 				= 추가 / 변경 / 읽기 => 메소드 (기능)
 * 
 * 			2) 변수 => 필요시마다 초기화
 * 						생성자 / 초기화 블록
 * 
 * 			==> 변수는 메모리 공간
 * 				------------- 값이 설정
 * 				1. 기본 초기값
 * 				2. 초기값 지정
 * 				------------ class블럭에서 가능
 * 				3. 외부에서 읽어서 
 * 				4.
 * 				------------- class 블럭에서 사용이 불가능
 * 					=> 생성자 / 초기화 블럭
 * 				*** class ClassName 
 * 					{ 
 * 
 *  			2) 정적변수 공통으로 사용변수
 *  				=> 동시에 변수값을 변경하고 싶은 경우
 *  			=> 웹 => 사용빈도는 적다
 *  			브라우저 ===> 자바 ====> 브라우저
 */
public class 클래스_7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
